{
  "$schema": "https://shadcn-vue.com/schema/registry-item.json",
  "name": "data-table",
  "type": "registry:ui",
  "title": "Data Table",
  "description": "Powerful table and datagrids built using TanStack Table.",
  "dependencies": [
    "@tanstack/vue-table",
    "@iconify/vue"
  ],
  "registryDependencies": [
    "https://raw.githubusercontent.com/acfatah/bun-vue/refs/heads/main/public/r/button.json",
    "https://raw.githubusercontent.com/acfatah/bun-vue/refs/heads/main/public/r/dropdown-menu.json",
    "https://raw.githubusercontent.com/acfatah/bun-vue/refs/heads/main/public/r/input.json",
    "https://raw.githubusercontent.com/acfatah/bun-vue/refs/heads/main/public/r/pagination.json",
    "https://raw.githubusercontent.com/acfatah/bun-vue/refs/heads/main/public/r/table.json",
    "https://raw.githubusercontent.com/acfatah/bun-vue/refs/heads/main/public/r/utils.json"
  ],
  "files": [
    {
      "path": "src/registry/components/ui/data-table/DataTable.vue",
      "content": "<script setup lang=\"ts\">\nimport type {\n  ColumnDef,\n  ColumnFiltersState,\n  ColumnSort,\n  RowSelectionState,\n  VisibilityState,\n} from '@tanstack/vue-table'\nimport { Icon } from '@iconify/vue'\n\nimport {\n  FlexRender,\n  getCoreRowModel,\n  getFilteredRowModel,\n  getPaginationRowModel,\n  getSortedRowModel,\n  useVueTable,\n} from '@tanstack/vue-table'\nimport { ref } from 'vue'\nimport { Button } from '@/components/ui/button'\nimport {\n  DropdownMenu,\n  DropdownMenuCheckboxItem,\n  DropdownMenuContent,\n  DropdownMenuTrigger,\n} from '@/components/ui/dropdown-menu'\nimport { Input } from '@/components/ui/input'\nimport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationFirst,\n  PaginationItem,\n  PaginationLast,\n  PaginationNext,\n  PaginationPrevious,\n} from '@/components/ui/pagination'\nimport {\n  Table,\n  TableBody,\n  TableCell,\n  TableHead,\n  TableHeader,\n  TableRow,\n} from '@/components/ui/table'\nimport { cn } from '@/lib/utils'\nimport { valueUpdater } from './index'\n\nconst props = withDefaults(defineProps<{\n  columns: ColumnDef<any, any>[]\n  data: Record<string, any>[]\n  class?: string\n  pagination?: boolean\n  filter?: boolean\n  loading?: boolean\n}>(), {\n  pagination: true,\n  filter: false,\n  loading: false,\n})\n\n// Table state\n// https://tanstack.com/table/latest/docs/api/core/table#state\nconst sorting = ref<ColumnSort[]>([])\nconst columnFilters = ref<ColumnFiltersState>([])\nconst columnVisibility = ref<VisibilityState>({})\nconst rowSelection = ref<RowSelectionState>({})\n\nconst table = useVueTable({\n  get data() { return props.data },\n  get columns() { return props.columns },\n  getCoreRowModel: getCoreRowModel(),\n  getPaginationRowModel: getPaginationRowModel(),\n  getSortedRowModel: getSortedRowModel(),\n  getFilteredRowModel: getFilteredRowModel(),\n  globalFilterFn: 'includesString',\n  onSortingChange: updaterOrValue => valueUpdater(updaterOrValue, sorting),\n  onColumnFiltersChange: updaterOrValue => valueUpdater(updaterOrValue, columnFilters),\n  onColumnVisibilityChange: updaterOrValue => valueUpdater(updaterOrValue, columnVisibility),\n  onRowSelectionChange: updaterOrValue => valueUpdater(updaterOrValue, rowSelection),\n  enableColumnPinning: true,\n\n  state: {\n    get sorting() { return sorting.value },\n    get columnFilters() { return columnFilters.value },\n    get columnVisibility() { return { id: false, ...columnVisibility.value } },\n    get rowSelection() { return rowSelection.value },\n  },\n})\n</script>\n\n<template>\n  <div\n    data-slot=\"data-table\" :class=\"cn(\n      `w-full`,\n      // styles to make the first column sticky\n      `\n        [&_table_td:nth-child(1)]:sticky [&_table_td:nth-child(1)]:left-0\n        [&_table_td:nth-child(1)]:bg-background\n        sm:[&_table_td:nth-child(1)]:bg-transparent\n        [&_table_th:nth-child(1)]:sticky [&_table_th:nth-child(1)]:left-0\n        [&_table_th:nth-child(1)]:bg-background\n        sm:[&_table_th:nth-child(1)]:bg-transparent\n      `,\n      props.class)\"\n  >\n    <slot v-if=\"props.filter\" name=\"filter\" :table=\"table\">\n      <div class=\"flex w-full items-center gap-2 py-4\">\n        <Input\n          class=\"w-full max-w-sm\" placeholder=\"Quick search...\"\n          @update:model-value=\"table.setGlobalFilter(String($event))\"\n        />\n        <DropdownMenu>\n          <DropdownMenuTrigger as-child>\n            <Button variant=\"outline\" class=\"ml-auto\">\n              <span\n                class=\"\n                  hidden\n                  sm:inline\n                \"\n              >Columns</span>\n              <Icon icon=\"lucide:more-vertical\" class=\"sm:hidden\" />\n              <Icon\n                icon=\"lucide:chevrons-up-down\"\n                class=\"\n                  hidden\n                  sm:inline\n                \"\n              />\n            </Button>\n          </DropdownMenuTrigger>\n          <DropdownMenuContent align=\"end\">\n            <DropdownMenuCheckboxItem\n              v-for=\"column in table.getAllColumns().filter((column) => column.getCanHide())\"\n              :key=\"column.id\"\n              class=\"capitalize\"\n              :model-value=\"column.getIsVisible()\"\n              @update:model-value=\"(value) => {\n                column.toggleVisibility(!!value)\n              }\"\n            >\n              {{ column.id }}\n            </DropdownMenuCheckboxItem>\n          </DropdownMenuContent>\n        </DropdownMenu>\n      </div>\n    </slot>\n\n    <div\n      class=\"\n        w-full rounded-md border py-1\n        [&_[data-slot='table-container']]:h-[532px]\n        [&_[data-slot='table-container']]:overflow-y-hidden\n      \"\n    >\n      <Table>\n        <TableHeader>\n          <TableRow v-for=\"headerGroup in table.getHeaderGroups()\" :key=\"headerGroup.id\">\n            <TableHead v-for=\"header in headerGroup.headers\" :key=\"header.id\">\n              <FlexRender\n                v-if=\"!header.isPlaceholder\" :render=\"header.column.columnDef.header\"\n                :props=\"header.getContext()\"\n              />\n            </TableHead>\n          </TableRow>\n        </TableHeader>\n        <TableBody>\n          <template v-if=\"props.loading\">\n            <TableCell :colspan=\"columns.length\" class=\"h-[490px] text-center\">\n              <Icon\n                icon=\"lucide:loader-circle\"\n                class=\"m-auto animate-spin\"\n              />\n            </TableCell>\n          </template>\n          <template v-else-if=\"table.getRowModel().rows?.length\">\n            <TableRow\n              v-for=\"row in table.getRowModel().rows\" :key=\"row.id\"\n              :data-state=\"row.getIsSelected() ? 'selected' : undefined\"\n            >\n              <TableCell v-for=\"cell in row.getVisibleCells()\" :key=\"cell.id\">\n                <FlexRender :render=\"cell.column.columnDef.cell\" :props=\"cell.getContext()\" />\n              </TableCell>\n            </TableRow>\n          </template>\n          <template v-else>\n            <TableRow>\n              <TableCell :colspan=\"columns.length\" class=\"h-24 text-center\">\n                No results\n              </TableCell>\n            </TableRow>\n          </template>\n        </TableBody>\n      </Table>\n    </div>\n\n    <slot v-if=\"props.pagination\" name=\"pagination\" :table=\"table\">\n      <div\n        class=\"\n          flex flex-col items-center justify-between gap-y-2 pt-4\n          sm:flex-row\n        \"\n      >\n        <div class=\"text-sm whitespace-nowrap text-muted-foreground\">\n          {{ table.getFilteredSelectedRowModel().rows.length }} of\n          {{ table.getFilteredRowModel().rows.length }} row(s) selected.\n        </div>\n\n        <Pagination\n          v-slot=\"{ page: currentPage }\"\n          class=\"\n            flex\n            sm:justify-end\n          \"\n          show-edges\n          :sibling-count=\"1\"\n          :page=\"table.getState().pagination.pageIndex + 1\"\n          :items-per-page=\"10\"\n          :total=\"table.getRowCount()\"\n        >\n          <PaginationContent v-slot=\"{ items }\">\n            <PaginationFirst\n              :disabled=\"!table.getCanPreviousPage()\"\n              @click=\"table.setPageIndex(0)\"\n            />\n\n            <PaginationPrevious\n              :disabled=\"!table.getCanPreviousPage()\"\n              @click=\"table.previousPage()\"\n            />\n\n            <template v-for=\"(page, index) in items\">\n              <PaginationItem\n                v-if=\"page.type === 'page'\"\n                :key=\"index\"\n                :value=\"page.value\"\n                :is-active=\"page.value === currentPage\"\n                @click=\"table.setPageIndex(page.value - 1)\"\n              >\n                {{ page.value }}\n              </PaginationItem>\n\n              <PaginationEllipsis\n                v-else\n                :key=\"page.type\"\n                :index=\"index\"\n              />\n            </template>\n\n            <PaginationNext\n              :disabled=\"!table.getCanNextPage()\"\n              @click=\"table.nextPage()\"\n            />\n\n            <PaginationLast\n              :disabled=\"!table.getCanNextPage()\"\n              @click=\"table.setPageIndex(table.getPageCount() - 1)\"\n            />\n          </PaginationContent>\n        </Pagination>\n      </div>\n    </slot>\n  </div>\n</template>\n\n<style>\n@reference '@/styles/global.css';\n\ntable tr[data-state='selected'] td:nth-child(1) {\n  @apply bg-muted;\n}\n</style>\n",
      "type": "registry:ui"
    },
    {
      "path": "src/registry/components/ui/data-table/index.ts",
      "content": "/**\n * Data Table\n *\n * Powerful table and datagrids built using TanStack Table.\n */\n\nimport type { Updater } from '@tanstack/vue-table'\nimport type { Ref } from 'vue'\n\nexport { default as DataTable } from './DataTable.vue'\n\nexport function valueUpdater<T extends Updater<any>>(updaterOrValue: T, ref: Ref) {\n  ref.value\n    = typeof updaterOrValue === 'function'\n      ? updaterOrValue(ref.value)\n      : updaterOrValue\n}\n",
      "type": "registry:ui"
    }
  ]
}