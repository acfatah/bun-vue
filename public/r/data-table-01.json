{
  "$schema": "https://shadcn-vue.com/schema/registry-item.json",
  "name": "data-table-01",
  "type": "registry:block",
  "dependencies": [
    "@vee-validate/zod",
    "zod",
    "@iconify/vue",
    "vee-validate",
    "@vueuse/core"
  ],
  "registryDependencies": [
    "http://localhost:8080/public/r/checkbox.json",
    "http://localhost:8080/public/r/button.json",
    "http://localhost:8080/public/r/dropdown-menu.json",
    "http://localhost:8080/public/r/calendar.json",
    "http://localhost:8080/public/r/form.json",
    "http://localhost:8080/public/r/input.json",
    "http://localhost:8080/public/r/popover.json",
    "http://localhost:8080/public/r/switch.json",
    "http://localhost:8080/public/r/toast.json",
    "http://localhost:8080/public/r/utils.json",
    "http://localhost:8080/public/r/data-table.json",
    "http://localhost:8080/public/r/dialog.json",
    "http://localhost:8080/public/r/sheet.json",
    "http://localhost:8080/public/r/label.json"
  ],
  "files": [
    {
      "path": "src/registry/blocks/data-table-01/components/DropdownAction.vue",
      "content": "<script setup lang=\"ts\">\nimport type { UserRecord } from '../schema'\n\nimport { Icon } from '@iconify/vue'\nimport { Button } from '@/components/ui/button'\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuTrigger,\n} from '@/components/ui/dropdown-menu'\n\nconst props = defineProps<{\n  data: UserRecord\n}>()\n\nconst emit = defineEmits(['viewRow', 'updateRow'])\n\nfunction copy(text: string) {\n  navigator.clipboard.writeText(text)\n}\n</script>\n\n<template>\n  <DropdownMenu>\n    <DropdownMenuTrigger as-child>\n      <Button variant=\"ghost\" class=\"size-8 self-end p-0\">\n        <span class=\"sr-only\">Open menu</span>\n        <Icon icon=\"lucide:ellipsis\" class=\"size-4\" />\n      </Button>\n    </DropdownMenuTrigger>\n    <DropdownMenuContent align=\"end\">\n      <DropdownMenuLabel>Actions</DropdownMenuLabel>\n      <DropdownMenuItem @click=\"copy(props.data.id || '')\">\n        Copy user ID\n      </DropdownMenuItem>\n      <DropdownMenuSeparator />\n      <DropdownMenuItem @click=\"emit('viewRow', props.data)\">\n        View\n      </DropdownMenuItem>\n      <DropdownMenuItem @click=\"emit('updateRow', props.data)\">\n        Update\n      </DropdownMenuItem>\n    </DropdownMenuContent>\n  </DropdownMenu>\n</template>\n",
      "type": "registry:page",
      "target": "~/src/pages/data-table-01/components/DropdownAction.vue"
    },
    {
      "path": "src/registry/blocks/data-table-01/data/users.ts",
      "content": "import type { UserRecord } from '../schema'\n\n/**\n * Sample user data\n */\nexport const data: UserRecord[] = [\n  {\n    id: 'cehvvfkspgked9dz6499hof9',\n    username: 'bradleycollier',\n    email: 'bradleycollier@example.com',\n    active: true,\n    credit: 100,\n    expiry: new Date('2025-01-01T00:00:00.000Z'),\n  },\n  {\n    id: 'ycu47aid0qstdcgr43zoue8s',\n    username: 'austinhayes',\n    email: 'austinhayes@example.com',\n    active: false,\n    credit: 250,\n    expiry: new Date('2024-12-01T00:00:00.000Z'),\n  },\n  {\n    id: 'hdwtfzw4s65kc8wbygeevz3d',\n    username: 'rileyadkins',\n    email: 'rileyadkins@example.com',\n    active: true,\n    credit: 500,\n    expiry: new Date('2024-09-01T00:00:00.000Z'),\n  },\n  {\n    id: 'wh5i34csvkee3xob31ej8cl4',\n    username: 'daniellebrooks',\n    email: 'daniellebrooks@example.com',\n    active: false,\n    credit: 75,\n    expiry: new Date('2024-10-01T00:00:00.000Z'),\n  },\n  {\n    id: 'ukm00584t0kfi2vnf4z2feyd',\n    username: 'hunterwalters',\n    email: 'hunterwalters@example.com',\n    active: true,\n    credit: 300,\n    expiry: new Date('2024-11-01T00:00:00.000Z'),\n  },\n]\n",
      "type": "registry:file",
      "target": "~/src/pages/data-table-01/data/users.ts"
    },
    {
      "path": "src/registry/blocks/data-table-01/columns.ts",
      "content": "import { Icon } from '@iconify/vue'\nimport { createColumnHelper } from '@tanstack/vue-table'\nimport mitt from 'mitt'\nimport { h } from 'vue'\n\nimport { Button } from '@/components/ui/button'\nimport { Checkbox } from '@/components/ui/checkbox'\nimport type { UserRecord } from './schema'\nimport DropdownAction from './components/DropdownAction.vue'\n\nexport const actions = mitt<{\n  view: UserRecord\n  update: UserRecord\n}>()\n\nexport const labels = {\n  id: 'ID',\n  username: 'Username',\n  email: 'Email',\n  active: 'Status',\n  credit: 'Credit',\n  expiry: 'Expiry',\n} as const\n\nexport const formatter = {\n  active(value: boolean) {\n    return value ? 'Active' : 'Inactive'\n  },\n\n  credit(value: unknown) {\n    let credit: number = 0\n\n    if (typeof value === 'string') {\n      credit = Number.parseFloat(value)\n    }\n    else if (typeof value === 'number') {\n      credit = value\n    }\n    else {\n      console.warn('Credit value must be a string or number')\n    }\n\n    // Format the amount as a dollar amount\n    return new Intl.NumberFormat('en-US', {\n      style: 'currency',\n      currency: 'USD',\n    }).format(credit)\n  },\n\n  expiry(value: Date | undefined) {\n    if (!value) {\n      return ''\n    }\n\n    return value.toLocaleDateString()\n  },\n}\n\n// The column definitions\n// https://tanstack.com/table/latest/docs/guide/column-defs\nconst columnHelper = createColumnHelper<UserRecord>()\n\nexport const columns = [\n  // Select column\n  columnHelper.group({\n    id: 'select',\n    header: ({ table }) => h(Checkbox, {\n      'modelValue': table.getIsAllPageRowsSelected() || (table.getIsSomePageRowsSelected() && 'indeterminate'),\n      'onUpdate:modelValue': value => table.toggleAllPageRowsSelected(!!value),\n      'ariaLabel': 'Select all',\n    }),\n    cell: ({ row }) => h(Checkbox, {\n      'modelValue': row.getIsSelected(),\n      'onUpdate:modelValue': value => row.toggleSelected(!!value),\n      'ariaLabel': 'Select row',\n    }),\n    enableSorting: false,\n    enableHiding: false,\n  }),\n\n  // id\n  columnHelper.accessor('id', {\n    header: () => labels.id,\n    cell: ({ row }) => h('div', null, row.getValue('id')),\n  }),\n\n  // username\n  columnHelper.accessor('username', {\n    header: () => labels.username,\n    cell: ({ row }) => h('div', null, row.getValue('username')),\n  }),\n\n  // Email column\n  columnHelper.accessor('email', {\n    header: ({ column }) => {\n      return h(Button, {\n        variant: 'ghost',\n        onClick: () => column.toggleSorting(column.getIsSorted() === 'asc'),\n      }, () => [labels.email, h(Icon, { icon: 'lucide:chevrons-up-down', class: 'ml-2 h-4 w-4' })])\n    },\n    cell: ({ row }) => h('div', { class: 'lowercase' }, row.getValue('email')),\n  }),\n\n  // Status column\n  columnHelper.accessor('active', {\n    header: () => labels.active,\n    cell: ({ row }) => h('div', { class: 'capitalize' }, formatter.active(row.getValue('active'))),\n  }),\n\n  // Credit column\n  columnHelper.accessor('credit', {\n    header: () => h('div', { class: 'text-right' }, labels.credit),\n    footer: props => props.column.getFacetedUniqueValues().size,\n    cell: ({ row }) => h('div', { class: 'text-right font-medium' }, formatter.credit(row.getValue('credit'))),\n  }),\n\n  // Expiry column\n  columnHelper.accessor('expiry', {\n    header: () => labels.expiry,\n    cell: ({ row }) => h('div', null, formatter.expiry(row.getValue('expiry'))),\n  }),\n\n  // Action column\n  columnHelper.display({\n    id: 'actions',\n    enableHiding: false,\n    cell: ({ row }) => h('div', { class: 'flex justify-end' }, h(DropdownAction, {\n      data: row.original,\n      onExpand: row.toggleExpanded,\n      onViewRow: data => actions.emit('view', data),\n      onUpdateRow: data => actions.emit('update', data),\n    })),\n  }),\n]\n",
      "type": "registry:file",
      "target": "~/src/pages/data-table-01/columns.ts"
    },
    {
      "path": "src/registry/blocks/data-table-01/DataForm.vue",
      "content": "<script setup lang=\"ts\">\nimport type { GenericObject, SubmissionHandler } from 'vee-validate'\nimport type { UserRecord } from './schema'\n\nimport { Icon } from '@iconify/vue'\nimport {\n  CalendarDate,\n  DateFormatter,\n  getLocalTimeZone,\n  parseAbsoluteToLocal,\n  today,\n} from '@internationalized/date'\nimport { toTypedSchema } from '@vee-validate/zod'\nimport { toDate } from 'reka-ui/date'\nimport { h, ref } from 'vue'\n\nimport { Button } from '@/components/ui/button'\nimport { Calendar } from '@/components/ui/calendar'\nimport {\n  Form,\n  FormControl,\n  FormDescription,\n  FormField,\n  FormItem,\n  FormLabel,\n  FormMessage,\n} from '@/components/ui/form'\nimport { Input } from '@/components/ui/input'\nimport {\n  Popover,\n  PopoverContent,\n  PopoverTrigger,\n} from '@/components/ui/popover'\nimport { Switch } from '@/components/ui/switch'\n// import { Textarea } from '@/components/ui/textarea'\nimport { toast } from '@/components/ui/toast'\nimport { cn } from '@/lib/utils'\n\nimport { labels } from './columns'\nimport { schema } from './schema'\n\nconst props = defineProps<{\n  data: UserRecord\n}>()\n\nconst userFormSchema = toTypedSchema(schema)\n\nconst df = new DateFormatter('en-US', {\n  dateStyle: 'long',\n})\n\nconst expiryPlaceholder = ref()\n\nconst onSubmit: SubmissionHandler<GenericObject> = function (values) {\n  const formValues = values as UserRecord\n\n  toast({\n    title: 'You submitted the following values:',\n    description: h(\n      'pre',\n      { class: 'mt-2 w-full rounded-md bg-slate-950 p-4' },\n      h('code', { class: 'text-white' }, JSON.stringify(formValues, null, 2)),\n    ),\n  })\n}\n</script>\n\n<template>\n  <Form\n    v-slot=\"{ meta }\"\n    :validation-schema=\"userFormSchema\"\n    :initial-values=\"props.data\"\n    class=\"flex h-full flex-col space-y-8 p-4\"\n    @submit=\"onSubmit\"\n  >\n    <FormField v-slot=\"{ componentField }\" name=\"username\">\n      <FormItem>\n        <FormLabel>{{ labels.username }}</FormLabel>\n        <FormControl>\n          <Input type=\"text\" placeholder=\"shadcn\" v-bind=\"componentField\" />\n        </FormControl>\n        <FormDescription>\n          Description for Username.\n        </FormDescription>\n        <FormMessage />\n      </FormItem>\n    </FormField>\n\n    <FormField v-slot=\"{ componentField }\" name=\"email\">\n      <FormItem>\n        <FormLabel>{{ labels.email }}</FormLabel>\n\n        <FormControl>\n          <Input type=\"email\" placeholder=\"shadcn\" v-bind=\"componentField\" />\n        </FormControl>\n        <FormDescription>\n          An email input.\n        </FormDescription>\n        <FormMessage />\n      </FormItem>\n    </FormField>\n\n    <!-- <FormField v-slot=\"{ componentField }\" name=\"bio\">\n      <FormItem>\n        <FormLabel>Bio</FormLabel>\n        <FormControl>\n          <Textarea placeholder=\"Tell us a little bit about yourself\" v-bind=\"componentField\" />\n        </FormControl>\n        <FormDescription>\n          You can <span>@mention</span> other users and organizations to link to them.\n        </FormDescription>\n        <FormMessage />\n      </FormItem>\n    </FormField> -->\n\n    <FormField v-slot=\"{ value, handleChange }\" name=\"active\">\n      <FormItem class=\"flex flex-row items-start space-y-0 space-x-3\">\n        <FormControl>\n          <FormControl>\n            <Switch\n              :model-value=\"!!value\"\n              @update:model-value=\"handleChange\"\n            />\n          </FormControl>\n        </FormControl>\n\n        <div class=\"flex w-full flex-col space-y-0.5\">\n          <FormLabel>{{ labels.active }}</FormLabel>\n          <FormDescription>\n            User status either active or inactive.\n          </FormDescription>\n          <FormMessage />\n        </div>\n      </FormItem>\n    </FormField>\n\n    <FormField v-slot=\"{ componentField }\" name=\"credit\">\n      <FormItem>\n        <FormLabel>{{ labels.credit }}</FormLabel>\n        <FormControl>\n          <Input type=\"number\" v-bind=\"componentField\" />\n        </FormControl>\n        <FormMessage />\n      </FormItem>\n    </FormField>\n\n    <FormField\n      v-slot=\"{ value, meta: fieldMeta, handleBlur, setValue }\"\n      name=\"expiry\"\n    >\n      <FormItem class=\"flex flex-col\">\n        <FormLabel>{{ labels.expiry }}</FormLabel>\n        <Popover\n          v-slot=\"{ open, setOpen }\"\n          @update:open=\"val => !val && handleBlur()\"\n        >\n          <PopoverTrigger\n            as-child\n            @blur=\"!open && !value && handleBlur()\"\n          >\n            <FormControl>\n              <Button\n                variant=\"outline\" :class=\"cn(\n                  'w-[240px] ps-3 text-start font-normal',\n                  !value && 'text-muted-foreground',\n                )\"\n                :aria-invalid=\"fieldMeta.touched && !fieldMeta.valid\"\n              >\n                <span>{{ value ? df.format(value) : \"Pick a date\" }}</span>\n                <Icon icon=\"lucide:calendar\" class=\"ms-auto size-4 opacity-50\" />\n              </Button>\n              <input hidden>\n            </FormControl>\n          </PopoverTrigger>\n          <PopoverContent class=\"w-auto p-0\">\n            <Calendar\n              v-model:placeholder=\"expiryPlaceholder\"\n              :calendar-label=\"labels.expiry\"\n              :model-value=\"value ? parseAbsoluteToLocal(value.toISOString()) : undefined\"\n              :min-value=\"new CalendarDate(1800, 1, 1)\"\n              :max-value=\"today(getLocalTimeZone())\"\n              initial-focus\n              @update:model-value=\"(val) => {\n                if (val) {\n                  setValue(toDate(val))\n                }\n              }\"\n              @click=\"(event: MouseEvent) => {\n                if ((event.target as Element)?.matches('[data-slot=calendar-cell-trigger]')) {\n                  setOpen(false)\n                }\n              }\"\n            />\n          </PopoverContent>\n        </Popover>\n        <FormDescription>\n          Description for date input.\n        </FormDescription>\n        <FormMessage />\n      </FormItem>\n    </FormField>\n\n    <div\n      class=\"\n        mt-auto flex w-full flex-col gap-2\n        md:flex-row\n      \"\n    >\n      <Button\n        type=\"reset\"\n        variant=\"outline\"\n        class=\"\n          w-full\n          md:ml-auto md:w-min\n        \"\n      >\n        Reset\n      </Button>\n\n      <Button\n        type=\"submit\"\n        :disabled=\"!(meta.dirty && meta.valid)\"\n        class=\"\n          w-full\n          md:w-min\n        \"\n      >\n        Save\n      </Button>\n    </div>\n  </Form>\n</template>\n",
      "type": "registry:page",
      "target": "~/src/pages/data-table-01/DataForm.vue"
    },
    {
      "path": "src/registry/blocks/data-table-01/DataTable.vue",
      "content": "<script setup lang=\"ts\">\nimport type { UserRecord } from './schema'\n\nimport { breakpointsTailwind, useBreakpoints } from '@vueuse/core'\nimport { onMounted, ref } from 'vue'\n\nimport { Button } from '@/components/ui/button'\nimport { DataTable } from '@/components/ui/data-table'\nimport {\n  Dialog,\n  DialogContent,\n  DialogDescription,\n  DialogFooter,\n  DialogHeader,\n  DialogTitle,\n} from '@/components/ui/dialog'\nimport {\n  Sheet,\n  // SheetClose,\n  SheetContent,\n  SheetDescription,\n  // SheetFooter,\n  SheetHeader,\n  SheetTitle,\n} from '@/components/ui/sheet'\nimport DataForm from './DataForm.vue'\nimport DataView from './DataView.vue'\n\n// See the `payment-columns.ts` file to see how columns are defined.\nimport { actions, columns } from './columns.ts'\n\nconst breakpoints = useBreakpoints(breakpointsTailwind)\nconst mdAndLarger = breakpoints.greaterOrEqual('md')\n\nconst data = ref<UserRecord[]>([])\nconst selectedRow = ref<UserRecord | null>(null)\nconst isLoading = ref(false)\nconst isSheetFormVisible = ref(false)\nconst isViewDialogVisible = ref(false)\nconst currentRow = ref<UserRecord | null>(null)\n\nasync function fetchData() {\n  isLoading.value = true\n\n  // In a real implementation, the data may come from an API request.\n  const data = await import('./data/users.ts').then(m => m.data)\n  await new Promise(resolve => setTimeout(resolve, 1000))\n\n  isLoading.value = false\n\n  return data\n}\n\nactions.on('view', (row) => {\n  isViewDialogVisible.value = true\n  currentRow.value = row\n})\n\nactions.on('update', (row) => {\n  isViewDialogVisible.value = false\n  isSheetFormVisible.value = true\n  selectedRow.value = row\n})\n\nonMounted(async () => {\n  data.value = await fetchData()\n})\n</script>\n\n<template>\n  <DataTable\n    :columns=\"columns\"\n    :data=\"data\"\n    :loading=\"isLoading\"\n  />\n\n  <!-- View User -->\n  <Dialog\n    v-model:open=\"isViewDialogVisible\"\n    @close=\"currentRow = null\"\n  >\n    <DialogContent\n      class=\"\n        flex max-h-[calc(100svh-2rem)] w-full flex-col\n        sm:max-w-2xl\n      \"\n    >\n      <DialogHeader>\n        <DialogTitle>User</DialogTitle>\n        <DialogDescription>\n          Some description.\n        </DialogDescription>\n      </DialogHeader>\n\n      <DataView v-if=\"currentRow\" :data=\"currentRow\" />\n\n      <DialogFooter>\n        <Button @click=\"currentRow && actions.emit('update', currentRow)\">\n          Edit\n        </Button>\n      </DialogFooter>\n    </DialogContent>\n  </Dialog>\n\n  <!-- Edit User -->\n  <Sheet\n    v-model:open=\"isSheetFormVisible\"\n    @close=\"currentRow = null\"\n  >\n    <SheetContent\n      :side=\"mdAndLarger ? 'right' : 'bottom'\"\n      class=\"md:max-w-2xl\"\n    >\n      <SheetHeader>\n        <SheetTitle>Edit User</SheetTitle>\n        <SheetDescription>\n          Make changes to user. Click save when you're done.\n        </SheetDescription>\n      </SheetHeader>\n\n      <DataForm v-if=\"selectedRow\" :data=\"selectedRow\" />\n    </SheetContent>\n  </Sheet>\n</template>\n",
      "type": "registry:page",
      "target": "~/src/pages/data-table-01/DataTable.vue"
    },
    {
      "path": "src/registry/blocks/data-table-01/DataView.vue",
      "content": "<script setup lang=\"ts\">\nimport type { UserRecord } from './schema'\n\nimport { Label } from '@/components/ui/label'\nimport { formatter, labels } from './columns'\n\ndefineProps<{\n  data: UserRecord\n}>()\n</script>\n\n<template>\n  <div class=\"-mx-6 mt-2 flex-grow space-y-4 overflow-y-auto px-6 text-sm\">\n    <div>\n      <div class=\"grid grid-cols-2 gap-4\">\n        <div class=\"space-y-1\">\n          <Label class=\"text-muted-foreground\">{{ labels.username }}</Label>\n          <p>{{ data?.username }}</p>\n        </div>\n        <div class=\"space-y-1\">\n          <Label class=\"text-muted-foreground\">{{ labels.id }}</Label>\n          <p>{{ data?.id }}</p>\n        </div>\n      </div>\n    </div>\n\n    <div>\n      <div class=\"grid grid-cols-2 gap-4\">\n        <div class=\"space-y-1\">\n          <Label class=\"text-muted-foreground\">{{ labels.email }}</Label>\n          <p>{{ data?.email }}</p>\n        </div>\n        <div class=\"space-y-1\">\n          <Label class=\"text-muted-foreground\">{{ labels.active }}</Label>\n          <p :class=\"data?.active ? 'text-green-500' : 'text-red-500'\">\n            {{ formatter.active(data?.active) }}\n          </p>\n        </div>\n      </div>\n    </div>\n\n    <div>\n      <div class=\"grid grid-cols-2 gap-4\">\n        <div class=\"space-y-1\">\n          <Label class=\"text-muted-foreground\">{{ labels.credit }}</Label>\n          <p>{{ formatter.credit(data?.credit) }}</p>\n        </div>\n        <div class=\"space-y-1\">\n          <Label class=\"text-muted-foreground\">{{ labels.expiry }}</Label>\n          <p>{{ formatter.expiry(data?.expiry) }}</p>\n        </div>\n      </div>\n    </div>\n  </div>\n</template>\n",
      "type": "registry:page",
      "target": "~/src/pages/data-table-01/DataView.vue"
    },
    {
      "path": "src/registry/blocks/data-table-01/schema.ts",
      "content": "import { z } from 'zod'\n\nexport const schema = z.object({\n  id: z.string().optional(),\n\n  username: z\n    .string()\n    .min(3, {\n      message: 'Username must be at least 2 characters.',\n    }),\n\n  email: z\n    .string({ message: 'Email cannot be empty' })\n    .pipe(z.email('Email is invalid')),\n\n  active: z.boolean(),\n\n  credit: z.number({\n    message: 'A credit amount is required.',\n  }),\n\n  expiry: z.date(),\n})\n\nexport type UserRecord = z.infer<typeof schema>\n",
      "type": "registry:file",
      "target": "~/src/pages/data-table-01/schema.ts"
    }
  ]
}