{
  "$schema": "https://shadcn-vue.com/schema/registry-item.json",
  "name": "calendar",
  "type": "registry:ui",
  "title": "Calender",
  "description": "A date field component that allows users to enter and edit date.",
  "dependencies": [
    "reka-ui",
    "@vueuse/core",
    "@iconify/vue"
  ],
  "registryDependencies": [
    "http://localhost:8080/public/r/utils.json",
    "http://localhost:8080/public/r/calendar.json",
    "http://localhost:8080/public/r/select.json",
    "http://localhost:8080/public/r/button.json"
  ],
  "files": [
    {
      "path": "src/registry/components/ui/calendar/CalendarGridRow.vue",
      "content": "<script lang=\"ts\" setup>\nimport type { CalendarGridRowProps } from 'reka-ui'\nimport type { HTMLAttributes } from 'vue'\nimport { reactiveOmit } from '@vueuse/core'\nimport { CalendarGridRow, useForwardProps } from 'reka-ui'\nimport { cn } from '@/lib/utils'\n\nconst props = defineProps<CalendarGridRowProps & {\n  class?: HTMLAttributes['class']\n}>()\n\nconst delegatedProps = reactiveOmit(props, 'class')\nconst forwardedProps = useForwardProps(delegatedProps)\n</script>\n\n<template>\n  <CalendarGridRow\n    data-slot=\"calendar-grid-row\"\n    :class=\"cn('flex', props.class)\"\n    v-bind=\"forwardedProps\"\n  >\n    <slot />\n  </CalendarGridRow>\n</template>\n",
      "type": "registry:ui"
    },
    {
      "path": "src/registry/components/ui/calendar/Calendar.vue",
      "content": "<script setup lang=\"ts\">\nimport type { DateValue } from '@internationalized/date'\nimport type { CalendarRootEmits, CalendarRootProps } from 'reka-ui'\nimport type { HTMLAttributes, Ref } from 'vue'\nimport { getLocalTimeZone, today } from '@internationalized/date'\nimport { reactiveOmit, useVModel } from '@vueuse/core'\nimport { CalendarRoot, useDateFormatter, useForwardPropsEmits } from 'reka-ui'\nimport { createDecade, createYear, toDate } from 'reka-ui/date'\nimport {\n  CalendarCell,\n  CalendarCellTrigger,\n  CalendarGrid,\n  CalendarGridBody,\n  CalendarGridHead,\n  CalendarGridRow,\n  CalendarHeadCell,\n  CalendarHeader,\n  CalendarHeading,\n  CalendarNextButton,\n  CalendarPrevButton,\n} from '@/components/ui/calendar'\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from '@/components/ui/select'\nimport { cn } from '@/lib/utils'\n\nconst props = withDefaults(defineProps<CalendarRootProps & {\n  class?: HTMLAttributes['class']\n}>(), {\n  modelValue: undefined,\n  weekdayFormat: 'short',\n  placeholder() {\n    return today(getLocalTimeZone())\n  },\n})\n\nconst emits = defineEmits<CalendarRootEmits>()\nconst delegatedProps = reactiveOmit(props, 'class', 'placeholder')\n\nconst placeholder = useVModel(props, 'modelValue', emits, {\n  passive: true,\n  defaultValue: today(getLocalTimeZone()),\n}) as Ref<DateValue>\n\nconst forwarded = useForwardPropsEmits(delegatedProps, emits)\nconst formatter = useDateFormatter('en')\n</script>\n\n<template>\n  <CalendarRoot\n    v-slot=\"{ date, grid, weekDays }\"\n    v-model:placeholder=\"placeholder\"\n    v-bind=\"forwarded\"\n    :class=\"cn(\n      'w-min rounded-md border p-3 select-none',\n      props.class,\n    )\"\n  >\n    <CalendarHeader>\n      <CalendarHeading class=\"flex w-full items-center justify-between gap-2\">\n        <CalendarPrevButton\n          class=\"relative\"\n        />\n        <div class=\"flex gap-1\">\n          <Select\n            :default-value=\"placeholder.month.toString()\"\n            :model-value=\"date.month.toString()\"\n            @update:model-value=\"(v) => {\n              if (!v || !placeholder) return;\n              if (Number(v) === placeholder?.month) return;\n              placeholder = placeholder.set({\n                month: Number(v),\n              })\n            }\"\n          >\n            <SelectTrigger\n              aria-label=\"Select month\"\n              size=\"sm\"\n              class=\"\n                w-min gap-1 py-0 pr-1 pl-2\n                dark:bg-transparent\n                [&>svg]:size-3.5 [&>svg]:opacity-100\n              \"\n            >\n              <SelectValue placeholder=\"Select month\" />\n            </SelectTrigger>\n            <SelectContent class=\"max-h-[200px]\">\n              <SelectItem\n                v-for=\"month in createYear({ dateObj: date })\"\n                :key=\"month.toString()\" :value=\"month.month.toString()\"\n              >\n                {{ formatter.custom(toDate(month), { month: 'short' }) }}\n              </SelectItem>\n            </SelectContent>\n          </Select>\n\n          <Select\n            :default-value=\"placeholder.year.toString()\"\n            :model-value=\"date.year.toString()\"\n            @update:model-value=\"(v) => {\n              if (!v || !placeholder) return;\n              if (Number(v) === placeholder?.year) return;\n              placeholder = placeholder.set({\n                year: Number(v),\n              })\n            }\"\n          >\n            <SelectTrigger\n              aria-label=\"Select year\"\n              size=\"sm\"\n              class=\"\n                w-min gap-1 py-0 pr-1 pl-2\n                dark:bg-transparent\n                [&>svg]:size-3.5 [&>svg]:opacity-100\n              \"\n            >\n              <SelectValue placeholder=\"Select year\" />\n            </SelectTrigger>\n            <SelectContent class=\"max-h-[200px]\">\n              <SelectItem\n                v-for=\"yearValue in createDecade({ dateObj: date, startIndex: -10, endIndex: 10 })\"\n                :key=\"yearValue.toString()\"\n                :value=\"yearValue.year.toString()\"\n              >\n                {{ yearValue.year }}\n              </SelectItem>\n            </SelectContent>\n          </Select>\n        </div>\n        <CalendarNextButton class=\"relative\" />\n      </CalendarHeading>\n    </CalendarHeader>\n\n    <div\n      class=\"\n        flex flex-col space-y-4 pt-4\n        sm:flex-row sm:gap-x-4 sm:gap-y-0\n      \"\n    >\n      <CalendarGrid v-for=\"month in grid\" :key=\"month.value.toString()\">\n        <CalendarGridHead>\n          <CalendarGridRow>\n            <CalendarHeadCell v-for=\"day in weekDays\" :key=\"day\">\n              {{ day }}\n            </CalendarHeadCell>\n          </CalendarGridRow>\n        </CalendarGridHead>\n        <CalendarGridBody class=\"grid\">\n          <CalendarGridRow\n            v-for=\"(weekDates, index) in month.rows\"\n            :key=\"`weekDate-${index}`\"\n            class=\"mt-2 w-full\"\n          >\n            <CalendarCell\n              v-for=\"weekDate in weekDates\"\n              :key=\"weekDate.toString()\"\n              :date=\"weekDate\"\n            >\n              <CalendarCellTrigger\n                :day=\"weekDate\"\n                :month=\"month.value\"\n              />\n            </CalendarCell>\n          </CalendarGridRow>\n        </CalendarGridBody>\n      </CalendarGrid>\n    </div>\n  </CalendarRoot>\n</template>\n",
      "type": "registry:ui"
    },
    {
      "path": "src/registry/components/ui/calendar/CalendarNextButton.vue",
      "content": "<script lang=\"ts\" setup>\nimport type { CalendarNextProps } from 'reka-ui'\nimport type { HTMLAttributes } from 'vue'\nimport { Icon } from '@iconify/vue'\nimport { reactiveOmit } from '@vueuse/core'\nimport { CalendarNext, useForwardProps } from 'reka-ui'\nimport { buttonVariants } from '@/components/ui/button'\nimport { cn } from '@/lib/utils'\n\nconst props = defineProps<CalendarNextProps & {\n  class?: HTMLAttributes['class']\n}>()\n\nconst delegatedProps = reactiveOmit(props, 'class')\nconst forwardedProps = useForwardProps(delegatedProps)\n</script>\n\n<template>\n  <CalendarNext\n    data-slot=\"calendar-next-button\"\n    :class=\"cn(\n      buttonVariants({ variant: 'ghost' }),\n      `\n        absolute right-0 size-8 bg-transparent p-0\n        hover:opacity-100\n      `,\n      props.class,\n    )\"\n    v-bind=\"forwardedProps\"\n  >\n    <slot>\n      <Icon icon=\"lucide:chevron-right\" />\n    </slot>\n  </CalendarNext>\n</template>\n",
      "type": "registry:ui"
    },
    {
      "path": "src/registry/components/ui/calendar/CalendarGridHead.vue",
      "content": "<script lang=\"ts\" setup>\nimport type { CalendarGridHeadProps } from 'reka-ui'\nimport type { HTMLAttributes } from 'vue'\nimport { CalendarGridHead } from 'reka-ui'\n\nconst props = defineProps<CalendarGridHeadProps & {\n  class?: HTMLAttributes['class']\n}>()\n</script>\n\n<template>\n  <CalendarGridHead\n    data-slot=\"calendar-grid-head\"\n    v-bind=\"props\"\n  >\n    <slot />\n  </CalendarGridHead>\n</template>\n",
      "type": "registry:ui"
    },
    {
      "path": "src/registry/components/ui/calendar/CalendarPrevButton.vue",
      "content": "<script lang=\"ts\" setup>\nimport type { CalendarPrevProps } from 'reka-ui'\nimport type { HTMLAttributes } from 'vue'\nimport { Icon } from '@iconify/vue'\nimport { reactiveOmit } from '@vueuse/core'\nimport { CalendarPrev, useForwardProps } from 'reka-ui'\nimport { buttonVariants } from '@/components/ui/button'\nimport { cn } from '@/lib/utils'\n\nconst props = defineProps<CalendarPrevProps & {\n  class?: HTMLAttributes['class']\n}>()\n\nconst delegatedProps = reactiveOmit(props, 'class')\nconst forwardedProps = useForwardProps(delegatedProps)\n</script>\n\n<template>\n  <CalendarPrev\n    data-slot=\"calendar-prev-button\"\n    :class=\"cn(\n      buttonVariants({ variant: 'ghost' }),\n      `\n        absolute left-0 size-8 bg-transparent p-0\n        hover:opacity-100\n      `,\n      props.class,\n    )\"\n    v-bind=\"forwardedProps\"\n  >\n    <slot>\n      <Icon icon=\"lucide:chevron-left\" />\n    </slot>\n  </CalendarPrev>\n</template>\n",
      "type": "registry:ui"
    },
    {
      "path": "src/registry/components/ui/calendar/CalendarCell.vue",
      "content": "<script lang=\"ts\" setup>\nimport type { CalendarCellProps } from 'reka-ui'\nimport type { HTMLAttributes } from 'vue'\nimport { reactiveOmit } from '@vueuse/core'\nimport { CalendarCell, useForwardProps } from 'reka-ui'\nimport { cn } from '@/lib/utils'\n\nconst props = defineProps<CalendarCellProps & {\n  class?: HTMLAttributes['class']\n}>()\n\nconst delegatedProps = reactiveOmit(props, 'class')\nconst forwardedProps = useForwardProps(delegatedProps)\n</script>\n\n<template>\n  <CalendarCell\n    data-slot=\"calendar-cell\"\n    :class=\"cn(\n      `\n        relative p-0 text-center text-sm\n        focus-within:relative focus-within:z-20\n        [&:has([data-selected])]:rounded-md [&:has([data-selected])]:bg-accent\n      `,\n      props.class,\n    )\"\n    v-bind=\"forwardedProps\"\n  >\n    <slot />\n  </CalendarCell>\n</template>\n",
      "type": "registry:ui"
    },
    {
      "path": "src/registry/components/ui/calendar/Calendar1.vue",
      "content": "<script lang=\"ts\" setup>\nimport type { CalendarRootEmits, CalendarRootProps } from 'reka-ui'\nimport type { HTMLAttributes } from 'vue'\nimport { reactiveOmit } from '@vueuse/core'\nimport { CalendarRoot, useForwardPropsEmits } from 'reka-ui'\nimport { cn } from '@/lib/utils'\nimport {\n  CalendarCell,\n  CalendarCellTrigger,\n  CalendarGrid,\n  CalendarGridBody,\n  CalendarGridHead,\n  CalendarGridRow,\n  CalendarHeadCell,\n  CalendarHeader,\n  CalendarHeading,\n  CalendarNextButton,\n  CalendarPrevButton,\n} from '.'\n\nconst props = defineProps<CalendarRootProps & {\n  class?: HTMLAttributes['class']\n}>()\n\nconst emits = defineEmits<CalendarRootEmits>()\nconst delegatedProps = reactiveOmit(props, 'class')\nconst forwarded = useForwardPropsEmits(delegatedProps, emits)\n</script>\n\n<template>\n  <CalendarRoot\n    v-slot=\"{ grid, weekDays }\"\n    data-slot=\"calendar\"\n    :class=\"cn('w-min p-3 select-none', props.class)\"\n    v-bind=\"forwarded\"\n  >\n    <CalendarHeader class=\"relative w-full\">\n      <CalendarPrevButton />\n      <CalendarHeading />\n      <CalendarNextButton />\n    </CalendarHeader>\n\n    <div\n      class=\"\n        mt-4 flex flex-col gap-y-4\n        sm:flex-row sm:gap-x-4 sm:gap-y-0\n      \"\n    >\n      <CalendarGrid v-for=\"month in grid\" :key=\"month.value.toString()\">\n        <CalendarGridHead>\n          <CalendarGridRow>\n            <CalendarHeadCell\n              v-for=\"day in weekDays\" :key=\"day\"\n            >\n              {{ day }}\n            </CalendarHeadCell>\n          </CalendarGridRow>\n        </CalendarGridHead>\n        <CalendarGridBody>\n          <CalendarGridRow\n            v-for=\"(weekDates, index) in month.rows\"\n            :key=\"`weekDate-${index}`\"\n            class=\"mt-2 w-full\"\n          >\n            <CalendarCell\n              v-for=\"weekDate in weekDates\"\n              :key=\"weekDate.toString()\"\n              :date=\"weekDate\"\n            >\n              <CalendarCellTrigger\n                :day=\"weekDate\"\n                :month=\"month.value\"\n              />\n            </CalendarCell>\n          </CalendarGridRow>\n        </CalendarGridBody>\n      </CalendarGrid>\n    </div>\n  </CalendarRoot>\n</template>\n",
      "type": "registry:ui"
    },
    {
      "path": "src/registry/components/ui/calendar/CalendarHeadCell.vue",
      "content": "<script lang=\"ts\" setup>\nimport type { CalendarHeadCellProps } from 'reka-ui'\nimport type { HTMLAttributes } from 'vue'\nimport { reactiveOmit } from '@vueuse/core'\nimport { CalendarHeadCell, useForwardProps } from 'reka-ui'\nimport { cn } from '@/lib/utils'\n\nconst props = defineProps<CalendarHeadCellProps & {\n  class?: HTMLAttributes['class']\n}>()\n\nconst delegatedProps = reactiveOmit(props, 'class')\nconst forwardedProps = useForwardProps(delegatedProps)\n</script>\n\n<template>\n  <CalendarHeadCell\n    data-slot=\"calendar-head-cell\"\n    :class=\"cn(\n      'w-8 rounded-md text-[0.8rem] font-normal text-muted-foreground',\n      props.class,\n    )\"\n    v-bind=\"forwardedProps\"\n  >\n    <slot />\n  </CalendarHeadCell>\n</template>\n",
      "type": "registry:ui"
    },
    {
      "path": "src/registry/components/ui/calendar/CalendarGrid.vue",
      "content": "<script lang=\"ts\" setup>\nimport type { CalendarGridProps } from 'reka-ui'\nimport type { HTMLAttributes } from 'vue'\nimport { reactiveOmit } from '@vueuse/core'\nimport { CalendarGrid, useForwardProps } from 'reka-ui'\nimport { cn } from '@/lib/utils'\n\nconst props = defineProps<CalendarGridProps & {\n  class?: HTMLAttributes['class']\n}>()\n\nconst delegatedProps = reactiveOmit(props, 'class')\nconst forwardedProps = useForwardProps(delegatedProps)\n</script>\n\n<template>\n  <CalendarGrid\n    data-slot=\"calendar-grid\"\n    :class=\"cn('w-full border-collapse space-x-1', props.class)\"\n    v-bind=\"forwardedProps\"\n  >\n    <slot />\n  </CalendarGrid>\n</template>\n",
      "type": "registry:ui"
    },
    {
      "path": "src/registry/components/ui/calendar/CalendarHeading.vue",
      "content": "<script lang=\"ts\" setup>\nimport type { CalendarHeadingProps } from 'reka-ui'\nimport type { HTMLAttributes } from 'vue'\nimport { reactiveOmit } from '@vueuse/core'\nimport { CalendarHeading, useForwardProps } from 'reka-ui'\nimport { cn } from '@/lib/utils'\n\nconst props = defineProps<CalendarHeadingProps & {\n  class?: HTMLAttributes['class']\n}>()\n\ndefineSlots<{\n  default: (props: { headingValue: string }) => any\n}>()\n\nconst delegatedProps = reactiveOmit(props, 'class')\nconst forwardedProps = useForwardProps(delegatedProps)\n</script>\n\n<template>\n  <CalendarHeading\n    v-slot=\"{ headingValue }\"\n    data-slot=\"calendar-heading\"\n    :class=\"cn('text-sm font-medium', props.class)\"\n    v-bind=\"forwardedProps\"\n  >\n    <slot :heading-value>\n      {{ headingValue }}\n    </slot>\n  </CalendarHeading>\n</template>\n",
      "type": "registry:ui"
    },
    {
      "path": "src/registry/components/ui/calendar/CalendarCellTrigger.vue",
      "content": "<script lang=\"ts\" setup>\nimport type { CalendarCellTriggerProps } from 'reka-ui'\nimport type { HTMLAttributes } from 'vue'\nimport { reactiveOmit } from '@vueuse/core'\nimport { CalendarCellTrigger, useForwardProps } from 'reka-ui'\nimport { buttonVariants } from '@/components/ui/button'\nimport { cn } from '@/lib/utils'\n\nconst props = withDefaults(defineProps<CalendarCellTriggerProps & {\n  class?: HTMLAttributes['class']\n}>(), {\n  as: 'button',\n})\n\nconst delegatedProps = reactiveOmit(props, 'class')\nconst forwardedProps = useForwardProps(delegatedProps)\n</script>\n\n<template>\n  <CalendarCellTrigger\n    data-slot=\"calendar-cell-trigger\"\n    :class=\"cn(\n      buttonVariants({ variant: 'ghost' }),\n      `\n        size-8 cursor-default p-0 font-normal\n        aria-selected:opacity-100\n        [&[data-today]:not([data-selected])]:bg-accent\n        [&[data-today]:not([data-selected])]:text-accent-foreground\n      `,\n      // Selected\n      `\n        data-[selected]:bg-primary data-[selected]:text-primary-foreground\n        data-[selected]:opacity-100 data-[selected]:hover:bg-primary\n        data-[selected]:hover:text-primary-foreground data-[selected]:focus:bg-primary\n        data-[selected]:focus:text-primary-foreground\n      `,\n      // Disabled\n      'data-[disabled]:text-muted-foreground data-[disabled]:opacity-50',\n      // Unavailable\n      'data-[unavailable]:text-destructive-foreground data-[unavailable]:line-through',\n      // Outside months\n      'data-[outside-view]:text-muted-foreground',\n      props.class,\n    )\"\n    v-bind=\"forwardedProps\"\n  >\n    <slot />\n  </CalendarCellTrigger>\n</template>\n",
      "type": "registry:ui"
    },
    {
      "path": "src/registry/components/ui/calendar/CalendarGridBody.vue",
      "content": "<script lang=\"ts\" setup>\nimport type { CalendarGridBodyProps } from 'reka-ui'\nimport { CalendarGridBody } from 'reka-ui'\n\nconst props = defineProps<CalendarGridBodyProps>()\n</script>\n\n<template>\n  <CalendarGridBody\n    data-slot=\"calendar-grid-body\"\n    v-bind=\"props\"\n  >\n    <slot />\n  </CalendarGridBody>\n</template>\n",
      "type": "registry:ui"
    },
    {
      "path": "src/registry/components/ui/calendar/index.ts",
      "content": "/**\n * Calender\n *\n * A date field component that allows users to enter and edit date.\n */\n\nexport { default as Calendar1 } from './Calendar1.vue'\nexport { default as Calendar } from './Calendar.vue'\nexport { default as CalendarCell } from './CalendarCell.vue'\nexport { default as CalendarCellTrigger } from './CalendarCellTrigger.vue'\nexport { default as CalendarGrid } from './CalendarGrid.vue'\nexport { default as CalendarGridBody } from './CalendarGridBody.vue'\nexport { default as CalendarGridHead } from './CalendarGridHead.vue'\nexport { default as CalendarGridRow } from './CalendarGridRow.vue'\nexport { default as CalendarHeadCell } from './CalendarHeadCell.vue'\nexport { default as CalendarHeader } from './CalendarHeader.vue'\nexport { default as CalendarHeading } from './CalendarHeading.vue'\nexport { default as CalendarNextButton } from './CalendarNextButton.vue'\nexport { default as CalendarPrevButton } from './CalendarPrevButton.vue'\n",
      "type": "registry:ui"
    },
    {
      "path": "src/registry/components/ui/calendar/CalendarHeader.vue",
      "content": "<script lang=\"ts\" setup>\nimport type { CalendarHeaderProps } from 'reka-ui'\nimport type { HTMLAttributes } from 'vue'\nimport { reactiveOmit } from '@vueuse/core'\nimport { CalendarHeader, useForwardProps } from 'reka-ui'\nimport { cn } from '@/lib/utils'\n\nconst props = defineProps<CalendarHeaderProps & {\n  class?: HTMLAttributes['class']\n}>()\n\nconst delegatedProps = reactiveOmit(props, 'class')\nconst forwardedProps = useForwardProps(delegatedProps)\n</script>\n\n<template>\n  <CalendarHeader\n    data-slot=\"calendar-header\"\n    :class=\"cn(\n      'relative flex w-full items-center justify-center',\n      props.class,\n    )\"\n    v-bind=\"forwardedProps\"\n  >\n    <slot />\n  </CalendarHeader>\n</template>\n",
      "type": "registry:ui"
    }
  ]
}