{
  "$schema": "https://shadcn-vue.com/schema/registry-item.json",
  "name": "carousel",
  "type": "registry:ui",
  "title": "Carousel",
  "description": "A carousel with motion and swipe built using Embla.",
  "dependencies": [
    "embla-carousel-vue",
    "@iconify/vue",
    "@vueuse/core"
  ],
  "registryDependencies": [
    "http://localhost:8080/public/r/utils.json",
    "http://localhost:8080/public/r/button.json"
  ],
  "files": [
    {
      "path": "src/registry/components/ui/carousel/CarouselItem.vue",
      "content": "<script setup lang=\"ts\">\nimport { cn } from '@/lib/utils'\nimport type { WithClassAsProps } from './interface'\nimport { useCarousel } from './use-carousel'\n\nconst props = defineProps<WithClassAsProps>()\nconst { orientation } = useCarousel()\n</script>\n\n<template>\n  <div\n    data-slot=\"carousel-item\"\n    role=\"group\"\n    aria-roledescription=\"slide\"\n    :class=\"cn(\n      'min-w-0 shrink-0 grow-0 basis-full',\n      orientation === 'horizontal' ? 'pl-4' : 'pt-4',\n      props.class,\n    )\"\n  >\n    <slot />\n  </div>\n</template>\n",
      "type": "registry:ui"
    },
    {
      "path": "src/registry/components/ui/carousel/interface.ts",
      "content": "import type useEmblaCarousel from 'embla-carousel-vue'\nimport type { EmblaCarouselVueType } from 'embla-carousel-vue'\nimport type { HTMLAttributes, UnwrapRef } from 'vue'\n\ntype CarouselApi = EmblaCarouselVueType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\nexport type UnwrapRefCarouselApi = UnwrapRef<CarouselApi>\n\nexport interface CarouselProps {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: 'horizontal' | 'vertical'\n}\n\nexport interface CarouselEmits {\n  (e: 'init-api', payload: UnwrapRefCarouselApi): void\n}\n\nexport interface WithClassAsProps {\n  class?: HTMLAttributes['class']\n}\n",
      "type": "registry:ui"
    },
    {
      "path": "src/registry/components/ui/carousel/CarouselPrevious.vue",
      "content": "<script setup lang=\"ts\">\nimport { Icon } from '@iconify/vue'\nimport type { ButtonVariants } from '@/components/ui/button'\nimport { Button } from '@/components/ui/button'\nimport { cn } from '@/lib/utils'\nimport type { WithClassAsProps } from './interface'\nimport { useCarousel } from './use-carousel'\n\nconst props = withDefaults(defineProps<{\n  variant?: ButtonVariants['variant']\n  size?: ButtonVariants['size']\n}\n& WithClassAsProps>(), {\n  variant: 'outline',\n  size: 'icon',\n})\n\nconst { orientation, canScrollPrev, scrollPrev } = useCarousel()\n</script>\n\n<template>\n  <Button\n    data-slot=\"carousel-previous\"\n    :disabled=\"!canScrollPrev\"\n    :class=\"cn(\n      'absolute size-8 rounded-full',\n      orientation === 'horizontal'\n        ? 'top-1/2 -left-12 -translate-y-1/2'\n        : '-top-12 left-1/2 -translate-x-1/2 rotate-90',\n      props.class,\n    )\"\n    :variant=\"variant\"\n    :size=\"size\"\n    @click=\"scrollPrev\"\n  >\n    <slot>\n      <Icon\n        icon=\"lucide:arrow-left\"\n        class=\"text-current\"\n      />\n      <span class=\"sr-only\">Previous Slide</span>\n    </slot>\n  </Button>\n</template>\n",
      "type": "registry:ui"
    },
    {
      "path": "src/registry/components/ui/carousel/CarouselNext.vue",
      "content": "<script setup lang=\"ts\">\nimport { Icon } from '@iconify/vue'\nimport type { ButtonVariants } from '@/components/ui/button'\nimport { Button } from '@/components/ui/button'\nimport { cn } from '@/lib/utils'\nimport type { WithClassAsProps } from './interface'\nimport { useCarousel } from './use-carousel'\n\nconst props = withDefaults(defineProps<{\n  variant?: ButtonVariants['variant']\n  size?: ButtonVariants['size']\n}\n& WithClassAsProps>(), {\n  variant: 'outline',\n  size: 'icon',\n})\n\nconst { orientation, canScrollNext, scrollNext } = useCarousel()\n</script>\n\n<template>\n  <Button\n    data-slot=\"carousel-next\"\n    :disabled=\"!canScrollNext\"\n    :class=\"cn(\n      'absolute size-8 rounded-full',\n      orientation === 'horizontal'\n        ? 'top-1/2 -right-12 -translate-y-1/2'\n        : '-bottom-12 left-1/2 -translate-x-1/2 rotate-90',\n      props.class,\n    )\"\n    :variant=\"variant\"\n    :size=\"size\"\n    @click=\"scrollNext\"\n  >\n    <slot>\n      <Icon\n        icon=\"lucide:arrow-right\"\n        class=\"text-current\"\n      />\n      <span class=\"sr-only\">Next Slide</span>\n    </slot>\n  </Button>\n</template>\n",
      "type": "registry:ui"
    },
    {
      "path": "src/registry/components/ui/carousel/Carousel.vue",
      "content": "<script setup lang=\"ts\">\nimport { cn } from '@/lib/utils'\nimport type { CarouselEmits, CarouselProps, WithClassAsProps } from './interface'\nimport { useProvideCarousel } from './use-carousel'\n\nconst props = withDefaults(defineProps<CarouselProps & WithClassAsProps>(), {\n  orientation: 'horizontal',\n})\n\nconst emits = defineEmits<CarouselEmits>()\n\nconst {\n  canScrollNext,\n  canScrollPrev,\n  carouselApi,\n  carouselRef,\n  orientation,\n  scrollNext,\n  scrollPrev,\n} = useProvideCarousel(props, emits)\n\ndefineExpose({\n  canScrollNext,\n  canScrollPrev,\n  carouselApi,\n  carouselRef,\n  orientation,\n  scrollNext,\n  scrollPrev,\n})\n\nfunction onKeyDown(event: KeyboardEvent) {\n  const prevKey = props.orientation === 'vertical' ? 'ArrowUp' : 'ArrowLeft'\n  const nextKey = props.orientation === 'vertical' ? 'ArrowDown' : 'ArrowRight'\n\n  if (event.key === prevKey) {\n    event.preventDefault()\n    scrollPrev()\n\n    return\n  }\n\n  if (event.key === nextKey) {\n    event.preventDefault()\n    scrollNext()\n  }\n}\n</script>\n\n<template>\n  <div\n    data-slot=\"carousel\"\n    :class=\"cn('relative', props.class)\"\n    role=\"region\"\n    aria-roledescription=\"carousel\"\n    tabindex=\"0\"\n    @keydown=\"onKeyDown\"\n  >\n    <slot\n      :can-scroll-next\n      :can-scroll-prev\n      :carousel-api\n      :carousel-ref\n      :orientation\n      :scroll-next\n      :scroll-prev\n    />\n  </div>\n</template>\n",
      "type": "registry:ui"
    },
    {
      "path": "src/registry/components/ui/carousel/CarouselContent.vue",
      "content": "<script setup lang=\"ts\">\nimport { cn } from '@/lib/utils'\nimport type { WithClassAsProps } from './interface'\nimport { useCarousel } from './use-carousel'\n\ndefineOptions({\n  inheritAttrs: false,\n})\n\nconst props = defineProps<WithClassAsProps>()\nconst { carouselRef, orientation } = useCarousel()\n</script>\n\n<template>\n  <div\n    ref=\"carouselRef\"\n    data-slot=\"carousel-content\"\n    class=\"overflow-hidden\"\n  >\n    <div\n      v-bind=\"$attrs\"\n      :class=\"cn(\n        'flex',\n        orientation === 'horizontal' ? '-ml-4' : '-mt-4 flex-col',\n        props.class,\n      )\"\n    >\n      <slot />\n    </div>\n  </div>\n</template>\n",
      "type": "registry:ui"
    },
    {
      "path": "src/registry/components/ui/carousel/use-carousel.ts",
      "content": "import { createInjectionState } from '@vueuse/core'\nimport emblaCarouselVue from 'embla-carousel-vue'\nimport { onMounted, ref } from 'vue'\nimport type {\n  UnwrapRefCarouselApi as CarouselApi,\n  CarouselEmits,\n  CarouselProps,\n} from './interface'\n\nconst [useProvideCarousel, useInjectCarousel] = createInjectionState(\n  ({\n    opts,\n    orientation,\n    plugins,\n  }: CarouselProps, emits: CarouselEmits) => {\n    const [emblaNode, emblaApi] = emblaCarouselVue({\n      ...opts,\n      axis: orientation === 'horizontal' ? 'x' : 'y',\n    }, plugins)\n\n    function scrollPrev() {\n      emblaApi.value?.scrollPrev()\n    }\n\n    function scrollNext() {\n      emblaApi.value?.scrollNext()\n    }\n\n    const canScrollNext = ref(false)\n    const canScrollPrev = ref(false)\n\n    function onSelect(api: CarouselApi) {\n      canScrollNext.value = api?.canScrollNext() || false\n      canScrollPrev.value = api?.canScrollPrev() || false\n    }\n\n    onMounted(() => {\n      if (!emblaApi.value)\n        return\n\n      emblaApi.value?.on('init', onSelect)\n      emblaApi.value?.on('reInit', onSelect)\n      emblaApi.value?.on('select', onSelect)\n\n      emits('init-api', emblaApi.value)\n    })\n\n    return {\n      carouselRef: emblaNode,\n      carouselApi: emblaApi,\n      canScrollPrev,\n      canScrollNext,\n      scrollPrev,\n      scrollNext,\n      orientation,\n    }\n  },\n)\n\nfunction useCarousel() {\n  const carouselState = useInjectCarousel()\n\n  if (!carouselState)\n    throw new Error('useCarousel must be used within a <Carousel />')\n\n  return carouselState\n}\n\nexport { useCarousel, useProvideCarousel }\n",
      "type": "registry:ui"
    },
    {
      "path": "src/registry/components/ui/carousel/index.ts",
      "content": "/**\n * Carousel\n *\n * A carousel with motion and swipe built using Embla.\n */\n\nexport { default as Carousel } from './Carousel.vue'\nexport { default as CarouselContent } from './CarouselContent.vue'\nexport { default as CarouselItem } from './CarouselItem.vue'\nexport { default as CarouselNext } from './CarouselNext.vue'\nexport { default as CarouselPrevious } from './CarouselPrevious.vue'\nexport type {\n  UnwrapRefCarouselApi as CarouselApi,\n} from './interface'\n\nexport { useCarousel } from './use-carousel'\n",
      "type": "registry:ui"
    }
  ]
}