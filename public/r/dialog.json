{
  "$schema": "https://shadcn-vue.com/schema/registry-item.json",
  "name": "dialog",
  "type": "registry:ui",
  "title": "Dialog",
  "description": "A window overlaid on either the primary window or another dialog window, rendering the content underneath inert.",
  "dependencies": [
    "reka-ui",
    "@vueuse/core",
    "@iconify/vue"
  ],
  "registryDependencies": [
    "http://localhost:8080/public/r/utils.json"
  ],
  "files": [
    {
      "path": "src/registry/components/ui/dialog/DialogHeader.vue",
      "content": "<script setup lang=\"ts\">\nimport type { HTMLAttributes } from 'vue'\nimport { cn } from '@/lib/utils'\n\nconst props = defineProps<{\n  class?: HTMLAttributes['class']\n}>()\n</script>\n\n<template>\n  <div\n    data-slot=\"dialog-header\"\n    :class=\"cn(\n      `\n        flex flex-col gap-2 text-center\n        sm:text-left\n      `,\n      props.class,\n    )\"\n  >\n    <slot />\n  </div>\n</template>\n",
      "type": "registry:ui"
    },
    {
      "path": "src/registry/components/ui/dialog/DialogTitle.vue",
      "content": "<script setup lang=\"ts\">\nimport type { DialogTitleProps } from 'reka-ui'\nimport type { HTMLAttributes } from 'vue'\nimport { reactiveOmit } from '@vueuse/core'\nimport { DialogTitle, useForwardProps } from 'reka-ui'\nimport { cn } from '@/lib/utils'\n\nconst props = defineProps<DialogTitleProps & {\n  class?: HTMLAttributes['class']\n}>()\n\nconst delegatedProps = reactiveOmit(props, 'class')\nconst forwardedProps = useForwardProps(delegatedProps)\n</script>\n\n<template>\n  <DialogTitle\n    data-slot=\"dialog-title\"\n    v-bind=\"forwardedProps\"\n    :class=\"cn(\n      'text-lg leading-none font-semibold',\n      props.class,\n    )\"\n  >\n    <slot />\n  </DialogTitle>\n</template>\n",
      "type": "registry:ui"
    },
    {
      "path": "src/registry/components/ui/dialog/DialogOverlay.vue",
      "content": "<script setup lang=\"ts\">\nimport type { DialogOverlayProps } from 'reka-ui'\nimport type { HTMLAttributes } from 'vue'\nimport { reactiveOmit } from '@vueuse/core'\nimport { DialogOverlay } from 'reka-ui'\nimport { cn } from '@/lib/utils'\n\nconst props = defineProps<DialogOverlayProps & {\n  class?: HTMLAttributes['class']\n}>()\n\nconst delegatedProps = reactiveOmit(props, 'class')\n</script>\n\n<template>\n  <DialogOverlay\n    data-slot=\"dialog-overlay\"\n    v-bind=\"delegatedProps\"\n    :class=\"cn(\n      `\n        fixed inset-0 z-50 bg-black/80\n        data-[state=closed]:animate-out data-[state=closed]:fade-out-0\n        data-[state=open]:animate-in data-[state=open]:fade-in-0\n      `,\n      props.class,\n    )\"\n  >\n    <slot />\n  </DialogOverlay>\n</template>\n",
      "type": "registry:ui"
    },
    {
      "path": "src/registry/components/ui/dialog/DialogFooter.vue",
      "content": "<script setup lang=\"ts\">\nimport type { HTMLAttributes } from 'vue'\nimport { cn } from '@/lib/utils'\n\nconst props = defineProps<{\n  class?: HTMLAttributes['class']\n}>()\n</script>\n\n<template>\n  <div\n    data-slot=\"dialog-footer\"\n    :class=\"cn(\n      `\n        flex flex-col-reverse gap-2\n        sm:flex-row sm:justify-end\n      `,\n      props.class,\n    )\"\n  >\n    <slot />\n  </div>\n</template>\n",
      "type": "registry:ui"
    },
    {
      "path": "src/registry/components/ui/dialog/DialogClose.vue",
      "content": "<script setup lang=\"ts\">\nimport type { DialogCloseProps } from 'reka-ui'\nimport { DialogClose } from 'reka-ui'\n\nconst props = defineProps<DialogCloseProps>()\n</script>\n\n<template>\n  <DialogClose\n    data-slot=\"dialog-close\"\n    v-bind=\"props\"\n    @click.prevent\n  >\n    <slot />\n  </DialogClose>\n</template>\n",
      "type": "registry:ui"
    },
    {
      "path": "src/registry/components/ui/dialog/DialogTrigger.vue",
      "content": "<script setup lang=\"ts\">\nimport type { DialogTriggerProps } from 'reka-ui'\nimport { DialogTrigger } from 'reka-ui'\n\nconst props = defineProps<DialogTriggerProps>()\n</script>\n\n<template>\n  <DialogTrigger\n    data-slot=\"dialog-trigger\"\n    v-bind=\"props\"\n  >\n    <slot />\n  </DialogTrigger>\n</template>\n",
      "type": "registry:ui"
    },
    {
      "path": "src/registry/components/ui/dialog/DialogDescription.vue",
      "content": "<script setup lang=\"ts\">\nimport type { DialogDescriptionProps } from 'reka-ui'\nimport type { HTMLAttributes } from 'vue'\nimport { reactiveOmit } from '@vueuse/core'\nimport { DialogDescription, useForwardProps } from 'reka-ui'\nimport { cn } from '@/lib/utils'\n\nconst props = defineProps<DialogDescriptionProps & {\n  class?: HTMLAttributes['class']\n}>()\n\nconst delegatedProps = reactiveOmit(props, 'class')\nconst forwardedProps = useForwardProps(delegatedProps)\n</script>\n\n<template>\n  <DialogDescription\n    data-slot=\"dialog-description\"\n    v-bind=\"forwardedProps\"\n    :class=\"cn('text-sm text-muted-foreground', props.class)\"\n  >\n    <slot />\n  </DialogDescription>\n</template>\n",
      "type": "registry:ui"
    },
    {
      "path": "src/registry/components/ui/dialog/Dialog.vue",
      "content": "<script setup lang=\"ts\">\nimport type { DialogRootEmits, DialogRootProps } from 'reka-ui'\nimport { DialogRoot, useForwardPropsEmits } from 'reka-ui'\n\nconst props = defineProps<DialogRootProps>()\nconst emits = defineEmits<DialogRootEmits>()\nconst forwarded = useForwardPropsEmits(props, emits)\n</script>\n\n<template>\n  <DialogRoot\n    data-slot=\"dialog\"\n    v-bind=\"forwarded\"\n  >\n    <slot />\n  </DialogRoot>\n</template>\n",
      "type": "registry:ui"
    },
    {
      "path": "src/registry/components/ui/dialog/DialogScrollContent.vue",
      "content": "<script setup lang=\"ts\">\nimport type { DialogContentEmits, DialogContentProps } from 'reka-ui'\nimport type { HTMLAttributes } from 'vue'\nimport { Icon } from '@iconify/vue'\nimport { reactiveOmit } from '@vueuse/core'\nimport {\n  DialogClose,\n  DialogContent,\n  DialogOverlay,\n  DialogPortal,\n  useForwardPropsEmits,\n} from 'reka-ui'\nimport { cn } from '@/lib/utils'\n\nconst props = defineProps<DialogContentProps & { class?: HTMLAttributes['class'] }>()\nconst emits = defineEmits<DialogContentEmits>()\nconst delegatedProps = reactiveOmit(props, 'class')\nconst forwarded = useForwardPropsEmits(delegatedProps, emits)\n</script>\n\n<template>\n  <DialogPortal>\n    <DialogOverlay\n      data-slot=\"dialog-overlay\"\n      :class=\"cn(\n        `\n          fixed inset-0 z-50 grid place-items-center overflow-y-auto bg-black/80\n          data-[state=closed]:animate-out data-[state=closed]:fade-out-0\n          data-[state=open]:animate-in data-[state=open]:fade-in-0\n        `,\n      )\"\n    >\n      <DialogContent\n        data-slot=\"dialog-content\"\n        :class=\"cn(\n          `\n            relative z-50 my-4 grid w-full max-w-[calc(100%-2rem)] gap-4 rounded-lg border\n            bg-background p-6 shadow-lg duration-200\n            data-[state=closed]:animate-out data-[state=closed]:fade-out-0\n            data-[state=closed]:zoom-out-95\n            data-[state=open]:animate-in data-[state=open]:fade-in-0\n            sm:rounded-lg\n            md:w-full\n          `,\n          props.class,\n        )\"\n        v-bind=\"forwarded\"\n        @pointer-down-outside=\"(event) => {\n          const originalEvent = event.detail.originalEvent;\n          const target = originalEvent.target as HTMLElement;\n\n          if (\n            originalEvent.offsetX > target.clientWidth\n            || originalEvent.offsetY > target.clientHeight\n          ) {\n            event.preventDefault();\n          }\n        }\"\n      >\n        <slot />\n\n        <DialogClose\n          data-slot=\"dialog-close\"\n          :class=\"cn(\n            `\n              absolute top-4 right-4 rounded-sm p-0.5 opacity-70 ring-offset-background\n              transition-opacity\n              hover:opacity-100\n              focus:ring-2 focus:ring-ring focus:ring-offset-2 focus:outline-hidden\n              disabled:pointer-events-none\n              data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\n              [&_svg]:pointer-events-none [&_svg]:shrink-0\n              [&_svg:not([class*='size-'])]:size-4\n            `,\n          )\"\n        >\n          <Icon icon=\"lucide:x\" />\n          <span class=\"sr-only\">Close</span>\n        </DialogClose>\n      </DialogContent>\n    </DialogOverlay>\n  </DialogPortal>\n</template>\n",
      "type": "registry:ui"
    },
    {
      "path": "src/registry/components/ui/dialog/DialogContent.vue",
      "content": "<script setup lang=\"ts\">\nimport type { DialogContentEmits, DialogContentProps } from 'reka-ui'\nimport type { HTMLAttributes } from 'vue'\nimport { Icon } from '@iconify/vue'\nimport { reactiveOmit } from '@vueuse/core'\nimport {\n  DialogClose,\n  DialogContent,\n  DialogPortal,\n  useForwardPropsEmits,\n} from 'reka-ui'\nimport { cn } from '@/lib/utils'\nimport DialogOverlay from './DialogOverlay.vue'\n\nconst props = defineProps<DialogContentProps & {\n  class?: HTMLAttributes['class']\n}>()\n\nconst emits = defineEmits<DialogContentEmits>()\nconst delegatedProps = reactiveOmit(props, 'class')\nconst forwarded = useForwardPropsEmits(delegatedProps, emits)\n</script>\n\n<template>\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogContent\n      data-slot=\"dialog-content\"\n      v-bind=\"forwarded\"\n      :class=\"cn(\n        `\n          fixed top-1/2 left-1/2 z-50 grid max-h-[calc(100svh-2rem)] w-full\n          max-w-[calc(100svw-2rem)] -translate-x-1/2 -translate-y-1/2 gap-4 rounded-lg border\n          bg-background p-6 shadow-lg duration-200\n          data-[state=closed]:animate-out data-[state=closed]:fade-out-0\n          data-[state=closed]:zoom-out-95\n          data-[state=open]:animate-in data-[state=open]:fade-in-0 data-[state=open]:zoom-in-95\n          sm:max-w-lg\n        `,\n        props.class,\n      )\"\n    >\n      <slot />\n\n      <DialogClose\n        data-slot=\"dialog-close\"\n        :class=\"cn(\n          `\n            absolute top-4 right-4 rounded-xs opacity-70 ring-offset-background transition-opacity\n            hover:opacity-100\n            focus:ring-2 focus:ring-ring focus:ring-offset-2 focus:outline-hidden\n            disabled:pointer-events-none\n            data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\n            [&_svg]:pointer-events-none [&_svg]:shrink-0\n            [&_svg:not([class*='size-'])]:size-4\n          `,\n        )\"\n      >\n        <Icon icon=\"lucide:x\" />\n        <span class=\"sr-only\">Close</span>\n      </DialogClose>\n    </DialogContent>\n  </DialogPortal>\n</template>\n",
      "type": "registry:ui"
    },
    {
      "path": "src/registry/components/ui/dialog/index.ts",
      "content": "/**\n * Dialog\n *\n * A window overlaid on either the primary window or another dialog window,\n * rendering the content underneath inert.\n */\n\nexport { default as Dialog } from './Dialog.vue'\nexport { default as DialogClose } from './DialogClose.vue'\nexport { default as DialogContent } from './DialogContent.vue'\nexport { default as DialogDescription } from './DialogDescription.vue'\nexport { default as DialogFooter } from './DialogFooter.vue'\nexport { default as DialogHeader } from './DialogHeader.vue'\nexport { default as DialogOverlay } from './DialogOverlay.vue'\nexport { default as DialogScrollContent } from './DialogScrollContent.vue'\nexport { default as DialogTitle } from './DialogTitle.vue'\nexport { default as DialogTrigger } from './DialogTrigger.vue'\n",
      "type": "registry:ui"
    }
  ]
}